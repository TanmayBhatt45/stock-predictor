# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rnS6_0UJ9zY631zz1GovYBk11BPNR7DT
"""

from flask import Flask, request, jsonify, send_file
import numpy as np
import pandas as pd
import yfinance as yf
import matplotlib.pyplot as plt
from tensorflow.keras.models import load_model
from sklearn.preprocessing import MinMaxScaler
from pandas.tseries.offsets import BDay
import os

app = Flask(__name__)

# Load the trained model
model = load_model("best_bayes_optimized_model.keras")

@app.route("/predict", methods=["GET"])
def predict_stock():
    try:
        # Get user input
        ticker = request.args.get("ticker", default="AAPL", type=str).upper()
        days_to_predict = request.args.get("days", default=7, type=int)

        # Fetch historical stock data
        df = yf.download(ticker, period="5y")[['Close']]
        scaler = MinMaxScaler(feature_range=(0, 1))
        df_scaled = scaler.fit_transform(df)

        # Prepare input sequence for prediction
        sequence_length = 60
        last_sequence = df_scaled[-sequence_length:].reshape(1, sequence_length, 1)

        predicted_prices = []
        current_input = last_sequence.copy()
        for _ in range(days_to_predict):
            next_pred = model.predict(current_input, verbose=0)
            predicted_prices.append(next_pred[0][0])
            current_input = np.append(current_input[:, 1:, :], [[[next_pred[0][0]]]], axis=1)

        # Convert predictions back to actual stock prices
        predicted_prices = scaler.inverse_transform(np.array(predicted_prices).reshape(-1, 1))
        future_dates = pd.bdate_range(start=pd.Timestamp.today(), periods=days_to_predict)

        # Plot actual vs predicted prices
        plt.figure(figsize=(12, 6))
        plt.plot(df.index[-100:], df["Close"].values[-100:], label="Actual Prices", color="blue")
        plt.plot(future_dates, predicted_prices, label="Predicted Prices", color="red", linestyle="dashed")
        plt.xlabel("Date")
        plt.ylabel("Stock Price")
        plt.title(f"Predicted Stock Price for {ticker}")
        plt.legend()
        plt.xticks(rotation=45)

        # Save the plot as an image
        plot_path = "static/stock_prediction.png"
        os.makedirs("static", exist_ok=True)
        plt.savefig(plot_path)
        plt.close()

        # Prepare response
        response = {"ticker": ticker, "predictions": [], "graph_url": plot_path}
        for date, price in zip(future_dates, predicted_prices.flatten()):
            response["predictions"].append({"date": str(date.date()), "price": round(float(price), 2)})

        return jsonify(response)
    except Exception as e:
        return jsonify({"error": str(e)})

@app.route("/plot", methods=["GET"])
def get_plot():
    return send_file("static/stock_prediction.png", mimetype='image/png')

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000)

