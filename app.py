# -*- coding: utf-8 -*-
"""App

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rnS6_0UJ9zY631zz1GovYBk11BPNR7DT
"""

import os

# ✅ Completely disable GPU for TensorFlow
os.environ["CUDA_VISIBLE_DEVICES"] = "-1"
os.environ["TF_CPP_MIN_LOG_LEVEL"] = "2"  # Suppress unnecessary TensorFlow logs

import tensorflow as tf

# ✅ Force TensorFlow to use CPU only
tf.config.set_visible_devices([], "GPU")



from flask import Flask, request, jsonify
import numpy as np
import pandas as pd
import yfinance as yf
import matplotlib.pyplot as plt
from tensorflow.keras.models import load_model
from sklearn.preprocessing import MinMaxScaler
from pandas.tseries.offsets import BDay

app = Flask(__name__)

# Load the trained model
MODEL_PATH = "best_bayes_optimized_model.keras"  # Ensure this file is in your Render deployment
model = load_model(MODEL_PATH)

@app.route("/predict", methods=["POST"])
def predict():
    try:
        data = request.get_json()
        ticker = data.get("ticker").strip().upper()
        days_to_predict = int(data.get("days"))

        # Fetch historical stock data
        df = yf.download(ticker, period="5y")
        df = df[['Close']]

        # Normalize the data
        scaler = MinMaxScaler(feature_range=(0, 1))
        df_scaled = scaler.fit_transform(df)

        # Prepare input sequence for prediction
        sequence_length = 60
        last_sequence = df_scaled[-sequence_length:].reshape(1, sequence_length, 1)

        # Predict future prices
        predicted_prices = []
        current_input = last_sequence.copy()

        for _ in range(days_to_predict):
            next_pred = model.predict(current_input, verbose=0)
            predicted_prices.append(next_pred[0][0])
            current_input = np.append(current_input[:, 1:, :], [[[next_pred[0][0]]]], axis=1)

        # Convert predictions back to actual prices
        predicted_prices = scaler.inverse_transform(np.array(predicted_prices).reshape(-1, 1))

        # Generate future trading dates
        future_dates = pd.bdate_range(start=pd.Timestamp.today(), periods=days_to_predict)

        # Create response
        response = {"ticker": ticker, "predictions": []}
        for date, price in zip(future_dates, predicted_prices.flatten()):
            response["predictions"].append({"date": date.strftime('%Y-%m-%d'), "price": round(float(price), 2)})

        return jsonify(response)

    except Exception as e:
        return jsonify({"error": str(e)})

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=10000)